import socket
import os 

#Fonction pour envoyer un message
def send_msg(sock, msg):
    msg_size = str(len(msg))
    tag = "REP"
    header = msg_size + "#" + tag
    msg_to_send = header + "#" + msg
    sock.sendall(msg_to_send.encode())

def send_dl_response(sock, msg):
    msg_size = str(len(msg))
    dl_tag = "DLR"
    header = msg_size + "#" + tag
    msg_to_send = header + "#" + msg
    sock.sendall(msg_to_send.encode())

#Fonction pour lister le répertoire et envoyer le résultat au serveur
def list_directory(sock):
    root_path = os.path.dirname(os.path.abspath(__file__))
    directory_contents = ""

    for root, dirs, files in os.walk(root_path):
        for name in dirs:
            directory_contents += f"{os.path.join(root, name)}\n"
        for name in files:
            directory_contents += f"{os.path.join(root, name)}\n"
    
    send_msg(sock, directory_contents.strip())

#Fonction pour télécharger un fichier
def download_file(sock, filename):
    if not os.path.exists(filename):
        print(f"File '{filename}' not found.")
        return
    else :
        with open(filename, 'r') as f:
            file_data = f.read()
            send_msg(sock, file_data)

#Fonction pour recevoir la commande du serveur et la traiter
def recv_command(sock) :
    command = sock.recv(1024).decode().strip()
    if command.upper() == "LIST" :
        list_directory(sock)
    elif command.upper().startswith("DOWNLOAD") :
        action, filename = command.split(" ", 1)
        download_file(sock, filename)
    else : 
        send_msg(sock, "Unknown command")
    return command        

host = '127.0.0.1'
port = 12347 
opt1_menu = "LIST : To list the file in the directory"
opt2_menu = "DOWNLOAD <filename> : To download a spaecific file"
opt3_menu = "QUIT"

#Socket de connexion au serveur (Communication comprise)
with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
    sock.connect((host, port))
    menu = "MENU" + "\n" + "-"*10 + "\n" + opt1_menu + "\n" + opt2_menu + "\n" + opt3_menu
    send_msg(sock, menu)

    #Boucle pour continuer la communication tant que QUIT n'est pas reçu
    while True:
        response = recv_command(sock)
        if response.upper() == "QUIT":
            print("Server requested to quit.")
            break


