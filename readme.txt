SCRIPT SERVEUR : 

recv_data() : Sert à recevoir les données envoyées par le client. les données sont sous la forme "taille#tag#données".
elle permet de connaitre la taille du message à venir pour être sûr de bien tout recevoir et le tag pour savoir si c'est une réponse classique où si c'est
la réponse à une commande DOWNLOAD.
Une fois la réponse reçu, elle est traité en fonction du tag.

send_data() : rien de spéciale elle sert juste à envoyer les commandes vers le client donc pas besoin de se prendre la t^te à formater les messages.

socket d'écoute : Ecoute sur un une interface ip/port qu'un client se connecte

logique principale après la connexion d'un client : Une fois le client connecté, on reçoit le menu avec les différentes commandes qui existent.
Ensuite un input nous demande la commande que l'on veut éxécuter sur le client, puis lui envoie. Si on tape "QUIT", cela met fin à la connexion.

SCRIPT CLIENT : 

send_msg() : Elle sert à envoyer des messages formatés au serveur : "taille#tag:MSG#données"

send_file() : Elle sert à envoyer la réponse à la commande DOWNLOAD au serveur :"taille#tag:FILE#données"

list_directory() : Elle sert à lister récusirvement tous les fichiers à partir du répertoire dans lequel se trouve client.py

recv_command() : Sert à gérer les commandes envoyées par le serveur et appeler les fonctions correspondantes

chiffrement() : Lorsque la commande ENCRYPT <file> est envoyée, cela appelle la fonction denerate_key() puis encrypt_file


