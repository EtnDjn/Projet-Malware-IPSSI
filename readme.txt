SCRIPT SERVEUR : 

recv_data() : Sert à recevoir les données envoyées par le client. les données sont sous la forme "taille#tag#données".
elle permet de connaitre la taille du message à venir pour être sûr de bien tout recevoir et le tag pour savoir si c'est une réponse classique où si c'est
la réponse à une commande DOWNLOAD.
Une fois la réponse reçu, elle est traité en fonction du tag.

send_data() : rien de spéciale elle sert juste à envoyer les commandes vers le client donc pas besoin de se prendre la t^te à formater les messages.

socket d'écoute : Ecoute sur un une interface ip/port qu'un client se connecte

logique principale après la connexion d'un client : Une fois le client connecté, on reçoit le menu avec les différentes commandes qui existent.
Ensuite un input nous demande la commande que l'on veut éxécuter sur le client, puis lui envoie. Si on tape "QUIT", cela met fin à la connexion.

SCRIPT CLIENT.PY :

UTILISATION
Ce script est conçu pour établir une connexion avec un serveur distant, recevoir des commandes, effectuer des actions telles que l'envoi de fichiers, la liste des répertoires, le chiffrement de fichiers et enregistrer les frappes du clavier.

Fonctions de communication avec le serveur : send_msg(sock, msg)

Cette fonction envoie un message à travers une connexion socket.

Paramètres :
    sock : Socket de connexion.
    msg : Message à envoyer.

send_file(sock, filename)

Cette fonction envoie un fichier à travers une connexion socket.

Paramètres :
    sock : Socket de connexion.
    filename : Chemin du fichier à envoyer.

list_directory(sock)

Cette fonction liste le contenu du répertoire et envoie les résultats au serveur à travers une connexion socket.

Paramètres :
    sock : Socket de connexion.

recv_command(sock)

Cette fonction reçoit une commande du serveur, la traite et renvoie une réponse.

Paramètres :
    sock : Socket de connexion.

Fonctions de chiffrement : generate_key()

Cette fonction génère une clé symétrique pour le chiffrement et le déchiffrement des données.
encrypt_file(key, input_file)

Cette fonction chiffre le contenu d'un fichier à l'aide de la clé fournie.

Paramètres :
    key : Clé de chiffrement.
    input_file : Chemin du fichier à chiffrer.

decrypt_file(key, encrypted_file, output_file)

Cette fonction déchiffre un fichier chiffré à l'aide de la clé fournie.

Paramètres :
    key : Clé de déchiffrement.
    encrypted_file : Chemin du fichier chiffré.
    output_file : Chemin du fichier de sortie déchiffré.

Enregistrement des frappes du clavier : log_keystroke(event)

Cette fonction enregistre les frappes du clavier dans un fichier de journal.

Paramètres :
    event : Événement de frappe de clavier.

