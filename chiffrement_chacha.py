from cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305
import os

def generate_key():
    """Generates a symmetric key for encryption and decryption."""
    return ChaCha20Poly1305.generate_key()

def encrypt_file(key, input_file):
    """
    Encrypts the content of a given file using the provided key.
    Generates a random nonce for each encryption.
    """
    chacha = ChaCha20Poly1305(key)
    nonce = os.urandom(12)  # Generates a random 12-byte nonce

    with open(input_file, 'rb') as file:
        plaintext = file.read()
    
    encrypted_data = chacha.encrypt(nonce, plaintext, None)
    return nonce + encrypted_data  # Concatenates the nonce with the encrypted data

def decrypt_file(key, encrypted_file, output_file):
    """
    Decrypts an encrypted file using the provided key.
    Separates the nonce from the encrypted data before decryption.
    """
    chacha = ChaCha20Poly1305(key)

    with open(encrypted_file, 'rb') as file_enc:
        data = file_enc.read()
        nonce = data[:12]  # Extracts the nonce from the encrypted data
        encrypted_data = data[12:]
    
    decrypted_data = chacha.decrypt(nonce, encrypted_data, None)

    with open(output_file, 'wb') as file_dec:
        file_dec.write(decrypted_data)

# Example of use
key = generate_key()  # Encryption/decryption key

# Encryption
encrypted_data = encrypt_file(key, 'test.txt')
with open('test.txt', 'wb') as f:
    f.write(encrypted_data)
print("File 'test.txt' encrypted.")

# Decryption
decrypt_file(key, 'test.txt', 'test_decrypted.txt')
print("File 'test.txt' decrypted to 'test_decrypted.txt'.")
